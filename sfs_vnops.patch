--- sfs_vnops.c	2013-08-02 14:30:48.000000000 -0400
+++ sfs_vnops_new.c	2013-08-02 20:33:55.000000000 -0400
@@ -328,12 +328,14 @@
 	KASSERT(skipstart + len <= SFS_BLOCKSIZE);
 
 	/* Compute the block offset of this block in the file */
-	fileblock = uio->uio_offset / SFS_BLOCKSIZE;
+	if (uio->uio_offset - SFS_INLINED_BYTES >= 0) {
+		fileblock = (uio->uio_offset - SFS_INLINED_BYTES) / SFS_BLOCKSIZE;
 
-	/* Get the disk block number */
-	result = sfs_bmap(sv, fileblock, doalloc, &diskblock);
-	if (result) {
-		return result;
+		/* Get the disk block number */
+		result = sfs_bmap(sv, fileblock, doalloc, &diskblock);
+		if (result) {
+			return result;
+		}
 	}
 
 	if (diskblock == 0) {
@@ -343,8 +345,7 @@
 		 */
 		KASSERT(uio->uio_rw == UIO_READ);
 		bzero(iobuf, sizeof(iobuf));
-	}
-	else {
+	} else {
 		/*
 		 * Read the block.
 		 */
@@ -366,9 +367,14 @@
 	 * If it was a write, write back the modified block.
 	 */
 	if (uio->uio_rw == UIO_WRITE) {
-		result = sfs_wblock(sfs, iobuf, diskblock);
-		if (result) {
-			return result;
+		if (diskblock == sv->sv_ino) {
+			memcpy(sv->sv_i.sfi_inlinedata + uio->uio_offset, iobuf + skipstart, len);
+	                sv->sv_dirty = true;
+		} else {
+			result = sfs_wblock(sfs, iobuf, diskblock);
+			if (result) {
+				return result;
+			}
 		}
 	}
 
@@ -393,7 +399,7 @@
 	off_t diskres;
 
 	/* Get the block number within the file */
-	fileblock = uio->uio_offset / SFS_BLOCKSIZE;
+	fileblock = (uio->uio_offset - SFS_INLINED_BYTES) / SFS_BLOCKSIZE;
 
 	/* Look up the disk block number */
 	result = sfs_bmap(sv, fileblock, doalloc, &diskblock);
@@ -476,24 +482,45 @@
 	/*
 	 * First, do any leading partial block.
 	 */
-	blkoff = uio->uio_offset % SFS_BLOCKSIZE;
-	if (blkoff != 0) {
-		/* Number of bytes at beginning of block to skip */
-		uint32_t skip = blkoff;
-
-		/* Number of bytes to read/write after that point */
-		uint32_t len = SFS_BLOCKSIZE - blkoff;
-
-		/* ...which might be less than the rest of the block */
-		if (len > uio->uio_resid) {
-			len = uio->uio_resid;
-		}
+	if (uio->uio_offset - SFS_INLINED_BYTES >= 0) {
+	        blkoff = (uio->uio_offset - SFS_INLINED_BYTES) % SFS_BLOCKSIZE;
+		if (blkoff > 0) {
+
+			/* Number of bytes at beginning of block to skip */
+			uint32_t skip = blkoff;
+
+			/* Number of bytes to read/write after that point */
+			uint32_t len = SFS_BLOCKSIZE - blkoff;
+
+			/* ...which might be less than the rest of the block */
+			if (len > uio->uio_resid) {
+				len = uio->uio_resid;
+			}
 
-		/* Call sfs_partialio() to do it. */
-		result = sfs_partialio(sv, uio, skip, len);
-		if (result) {
-			goto out;
+			/* Call sfs_partialio() to do it. */
+			result = sfs_partialio(sv, uio, skip, len);
+			if (result) {
+				goto out;
+			}
 		}
+	} else {
+                /* Number of bytes at beginning of block to skip */
+                uint32_t skip = SFS_BLOCKSIZE - SFS_INLINED_BYTES + uio->uio_offset;
+
+                /* Number of bytes to read/write after that point */
+                uint32_t len = SFS_INLINED_BYTES - uio->uio_offset;
+
+                /* ...which might be less than the rest of the block */
+                if (len > uio->uio_resid) {
+                        len = uio->uio_resid;
+                }
+
+                /* Call sfs_partialio() to do it. */
+                result = sfs_partialio(sv, uio, skip, len);
+
+                if (result) {
+                        goto out;
+                }
 	}
 
 	/* If we're done, quit. */
@@ -504,7 +531,7 @@
 	/*
 	 * Now we should be block-aligned. Do the remaining whole blocks.
 	 */
-	KASSERT(uio->uio_offset % SFS_BLOCKSIZE == 0);
+	KASSERT((uio->uio_offset - SFS_INLINED_BYTES) % SFS_BLOCKSIZE == 0);
 	nblocks = uio->uio_resid / SFS_BLOCKSIZE;
 	for (i=0; i<nblocks; i++) {
 		result = sfs_blockio(sv, uio);
@@ -1543,63 +1570,60 @@
  * getdirentry
  */
 static
-int 
-sfs_getdirentry(struct vnode *dir, struct uio *uio)
-{
-    DEBUG(DB_SFS, "sfs getdirentry entry \n");
-    int result;
-    struct sfs_dir direntry;
-    struct sfs_vnode *sv = dir->vn_data;
-    int slot;
-    
-    // Calculate slot number by using offset from uio
-    slot = uio->uio_offset / sizeof(struct sfs_dir);
-    
-    // Acquire lock
-    vfs_biglock_acquire();
-    
-    // Keep looping till you find a non free dir entry
-    while (1) {
-        // Check if we're still within number of dir entries
-        if (slot < sfs_dir_nentries(sv)) {
-            // Get dir entry
-            if((result = sfs_readdir(sv, &direntry, slot))) {
-                DEBUG(DB_SFS, "Dir read fail.\n");
-                // Release lock
-                vfs_biglock_release();
-                return result;
-            }
-           
-            // Check if this dir entry is taken or free
-            if (direntry.sfd_ino == SFS_NOINO) {
-                // Dir entry is free
-
-                // Want next dir entry so increment slot
-                slot++;
-             }
-             else{
-                //  Read a single filename from a directory into a uio
-                result = uiomove(&direntry.sfd_name, SFS_NAMELEN, uio);
-                
-                DEBUG(DB_SFS, "Slot: %d\n", slot);
-    
-                // Set uio's new offset by moving up one dir entry
-                uio->uio_offset = (slot++) * sizeof(struct sfs_dir);
-    
-                // Release lock
-                vfs_biglock_release();
-                return 0;
-             }
-       }
-       else {
-           DEBUG(DB_SFS, "Slot exceeds number of dir entries.\n");
-           // Release lock
-           vfs_biglock_release();
-           return ENOENT;
-       }
-    } 
-} 
+int
+sfs_getdirentry(struct vnode *vn, struct uio *uio) {
+	struct sfs_vnode *sv;
+	int slot, result;
+	struct sfs_dir sfd;
+	char name[SFS_NAMELEN];
+
+	KASSERT(uio->uio_rw == UIO_READ);
+	KASSERT(uio->uio_offset >= 0);
+	sv = vn->vn_data;
+
+	vfs_biglock_acquire();
+
+	if (sv->sv_i.sfi_type != SFS_TYPE_DIR) {
+		vfs_biglock_release();
+		return ENOTDIR;
+	}
+
+	// slot index
+	slot = uio->uio_offset;
+
+	while (true) {
+		if (slot >= sfs_dir_nentries(sv)) {
+			// EOF
+			vfs_biglock_release();
+			return 0;
+		}
+
+		result = sfs_readdir(sv, &sfd, slot);
+		if (result) {
+			vfs_biglock_release();
+			return result;
+		}
+
+		if (sfd.sfd_ino != SFS_NOINO)
+			// make sure it's not empty
+			break;
 
+		slot++;
+	}
+
+	strcpy(name, sfd.sfd_name);
+
+	vfs_biglock_release();
+
+	result = uiomove(name, (size_t)strlen(name) * sizeof(char), uio);
+	if (result)
+		return result;
+
+	// update the offset
+	uio->uio_offset = slot + 1;
+
+	return 0;
+}
 
 //////////////////////////////////////////////////
 
